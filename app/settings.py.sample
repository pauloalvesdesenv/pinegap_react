
# -*- coding: utf-8 -*-
#from __future__ import unicode_literals
import sys
reload(sys)
sys.setdefaultencoding('UTF8')
import os

############# CURRENCIES ##################
import moneyed
from moneyed.localization import _FORMATTER
from decimal import ROUND_HALF_EVEN


BRL = moneyed.add_currency(
    code='BRL',
    numeric='068',
    name='Real brasileiro',
    countries=('BRAZIL', )
)

# Currency Formatter will output 2.000,00 R$.
_FORMATTER.add_sign_definition(
    'default',
    BRL,
    prefix=u'R$. '
)

_FORMATTER.add_formatting_definition(
    'pt_BR',
    group_size=3, group_separator=".", decimal_point=",",
    positive_sign="",  trailing_positive_sign="",
    negative_sign="-", trailing_negative_sign="",
    rounding_method=ROUND_HALF_EVEN
)
CURRENCIES = ('BRL', 'USD')
CURRENCY_CHOICES = [('BRL', 'BRL R$'), ('USD', 'USD $')]



PINEGAP_VERSION = os.environ.get('PINEGAP_VERSION', '1.0.3-BETA')

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', '*** omg this is the secret !***')
CSRF_COOKIE_SECURE = True
CSRF_USE_SESSIONS = True

#SESSION_COOKIE_SECURE = True # Only if HTTPS is enabled
SESSION_COOKIE_HTTPONLY = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
SECURE_HSTS_PRELOAD = True
SECURE_HSTS_SECONDS = 3600 # 1 hour (for testing only, otherwise, set 31536000)
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_SSL_REDIRECT = False # Dev/test environment
#SECURE_SSL_REDIRECT = True # Production environment, if HTTPS is enabled
X_FRAME_OPTIONS = 'SAMEORIGIN'
CSRF_COOKIE_HTTPONLY = True

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', True)    # Dev/test environment
#DEBUG = os.environ.get('DEBUG', False)   # Production environment

ALLOWED_HOSTS = ['*'] # /!\ Not safe for production environment

LOGGING_LEVEL = os.environ.get('LOGGING_LEVEL', 'INFO,WARNING,ERROR,DEBUG')

PROXIES = {
    "http": os.environ.get('PINEGAP_PROXY_HTTP', None),
    "https": os.environ.get('PINEGAP_PROXY_HTTPS', None)
}

INTERNAL_IPS = ALLOWED_HOSTS
USE_X_FORWARDED_HOST = True

INSTALLED_APPS = [
    'django.contrib.humanize',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_swagger',
    'datetimewidget',
    'mathfilters',
    'engines',
    'findings',
    'assets',
    'users',
    'scans',
    'events',
    'djmoney',
    'radar',
    'rules',
    'whitelabels',
    'search',
    'reportings',
    'settings',
    'currencies',
    'debug_toolbar',
    'django_celery_results',
    'django_celery_beat',
]






#AUTHENTICATION_BACKENDS = (
#    'django_stuff.backends.auth.EmailOrUsernameModelBackend',
#    'django.contrib.auth.backends.ModelBackend', )

#AUTHENTICATION_BACKENDS = (
#    "django.contrib.auth.backends.ModelBackend",
#
#    "users.auth.AuthenticationEmailBackend",
#)

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django_session_timeout.middleware.SessionTimeoutMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'users.middleware.RequireLoginMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.locale.LocaleMiddleware',
]


#SESSION TIMEOUT
#SESSION_EXPIRE_SECONDS = 11800  # 1/2 hour
#SESSION_EXPIRE_AFTER_LAST_ACTIVITY = True
#SESSION_EXPIRE_AFTER_LAST_ACTIVITY_GRACE_PERIOD = 30 # group by minute

SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 11800 # set just 10 seconds to test
SESSION_SAVE_EVERY_REQUEST = True


#AUTHENTICATION_BACKENDS = (
#    'django_stuff.backends.auth.EmailOrUsernameModelBackend',
#    'django.contrib.auth.backends.ModelBackend' )

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ]
}

LOGIN_REQUIRED_URLS = (
    r'/(.*)$',
)
LOGIN_REQUIRED_URLS_EXCEPTIONS = (
    r'/login(.*)$',
    r'/logout(.*)$',
    r'/password_reset/$',
    r'/password_reset/(.*)/$',
    r'/reset(.*)$',
    r'/reset(.*)/$',
    r'/reset(.*)/(.*)$',
    r'/reset/(.*)/(.*)$',
    r'/static/(.*)$',
    r'/(.*)/api/v1/(.*)$',
)

LOGIN_URL = '/login'
LOGOUT_URL = '/logout'
LOGIN_REDIRECT_URL = '/dashboard'
APPEND_SLASH = False
PASSWORD_RESET_URL = '/password_reset'
LOGOUT_REDIRECT_URL = '/login'

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ["templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
		'django.template.context_processors.media',
                'whitelabels.custom_context_processor.whitelabel_renderer',
		'currencies.context_processors.currencies',
            ],
            'libraries': {
                'pinegap_tags': 'templatetags.common_tags'
            }
        },
    },
]





WSGI_APPLICATION = 'app.wsgi.application'


# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('DB_ENV_DB', 'pinegap_db'),
        'USER': os.environ.get('DB_ENV_POSTGRES_USER', 'PINEGAP_DB_USER'),
        'PASSWORD': os.environ.get('DB_ENV_POSTGRES_PASSWORD', 'PINEGAP_DB_PASSWD_TO_CHANGE'),
        'HOST': os.environ.get('DB_PORT_5432_TCP_HOST', 'pinegap-database'),
        'PORT': os.environ.get('DB_PORT_5432_TCP_PORT', '5432'),
    }
}


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_AUTH_SERIALIZERS = {
    'PASSWORD_RESET_SERIALIZER':
        'password_reset.serializers.PasswordResetSerializer',
}

# Internationalization
TIME_ZONE = os.environ.get('PINEGAP_TZ', 'America/Sao_Paulo')
LANGUAGE_CODE = 'pt-br'
USE_I18N = True
USE_L10N = True
USE_TZ = True
USE_THOUSAND_SEPARATOR = True
DECIMAL_SEPARATOR = ','
THOUSAND_SEPARATOR = '.'
NUMBER_GROUPING = 3

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# RABBITMQ
RABBIT_HOSTNAME = os.environ.get('RABBIT_PORT_5672_TCP', 'localhost:5672')

if RABBIT_HOSTNAME.startswith('tcp://'):
    RABBIT_HOSTNAME = RABBIT_HOSTNAME.split('//')[1]

BROKER_URL = os.environ.get('BROKER_URL', '')
if BROKER_URL == "":
    BROKER_URL = 'amqp://{user}:{password}@{hostname}/{vhost}/'.format(
        user=os.environ.get('RABBIT_ENV_USER', 'guest'),
        password=os.environ.get('RABBIT_ENV_PASS', 'guest'),
        hostname=RABBIT_HOSTNAME,
        vhost=os.environ.get('RABBIT_ENV_VHOST', ''))

# Celery+RabbitMQ tuning
BROKER_HEARTBEAT = None
BROKER_POOL_LIMIT = 1
BROKER_CONNECTION_TIMEOUT = 30
# BROKER_HEARTBEAT = '?heartbeat=30'
# if not BROKER_URL.endswith(BROKER_HEARTBEAT):
#     BROKER_URL += BROKER_HEARTBEAT
# BROKER_POOL_LIMIT = None

# CELERY
CELERY_RESULT_BACKEND = None
# CELERY_RESULT_BACKEND = 'django-db'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = os.environ.get('PINEGAP_TZ', 'America/Cuiaba')
CELERY_ENABLE_UTC = False
# CELERY_IGNORE_RESULT = True
# CELERY_TASK_IGNORE_RESULT = True
# CELERYD_TASK_SOFT_TIME_LIMIT = 60
# CELERY_TASK_RESULT_EXPIRES = 300
CELERY_ACKS_LATE = True


# Email settings
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', True)
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'my@pinegap.io')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', 'u8jNAuyye$rC@nqCO')
EMAIL_PORT = os.environ.get('EMAIL_PORT', 587)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# Templates de Conteudo de email
#EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"
#EMAIL_FILE_PATH = os.path.join(BASE_DIR, "/templates/registration")

# Monitoring APIs
SUPERVISORD_API_URL = 'http://localhost:9001/RPC2'
CELERYFLOWER_API_URL = 'http://localhost:5555/api/'
#RABBITMQ_API_URL = 'http://{}/api/'.format(os.environ.get('RABBIT_PORT_15672_TCP', 'localhost:15672'))

# Fix [Errno 32] Broken pipe
# import SocketServer
# from wsgiref import handlers
# SocketServer.BaseServer.handle_error = lambda *args, **kwargs: None
# handlers.BaseHandler.log_exception = lambda *args, **kwargs: None
